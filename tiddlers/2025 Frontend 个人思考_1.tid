created: 20250320045423968
modified: 20250801090132112
tags: 
title: 2025 Frontend 个人思考
type: text/vnd.tiddlywiki


我认为需要更新自己的思维模式了。

在 frontend 领域，我是 React 使用者，目前采用 React 的思维模式。

我理解的 React 思维模式和其他的思维模式有哪些不同？

> 主流的 React Vue Svelte 似乎也没有明显的不同，都差不多。

# React Hooks 的 render 机制，react `re-render` 时 Components 和 Hooks 都是普通函数，没有生命周期的概念，没有 mounted, unmounted 的概念。Class Components 时代有生命周期，但是 Hook Components 时代没有了。如果有人还说有，那我只能🤷
# React 本质上是 `自上而下` 的形式进行数据传递，所以才会出现传递地狱（props drilling）。虽然 Context 可以缓解传递地狱，但是还是自上而下，需要在最外层定义一层。[[JS Signals]] 似乎解决这个问题，保持关注。

其实有生命周期的也挺好，可以减少不必要的运算。Svelte 就是 the component run once 然后通过 fine-grained 更新 UI。简单实例中效果不错，不知道大项目中效果如何。


根据技术栈区分

# JS 社区: [[等待 React 的 jQuery 时刻]]
# Elixir 社区
# Native

! 正文

!! JS 社区

1. Reactive (响应式状态管理)

我认为基于 tree 的思考方式不够简洁，React Vue 都推荐单向数据流，即数据流类似 DOM 结构一样，类似 Tree 的形式从上到下。这种思考方式符合 HTML 中 DOM 的组织形式，大多数人容易理解。但是我认为基于基于监听的响应式才更简单。

我想表达的不是 Vue 的 ref，不是单个 component 中的响应式。我想讨论的是 App 整体的响应式。

常见需求：跨组件间，无需显式传递数据的 state management

# React 可以通过 Context 实现
# Vue 可以通过全局 provide inject 实现

但是 React Context 和 Vue Provide 都有一个问题，就是它们都必须提供一个 Wrapper。

```jsx
// Wrapper
<ThemeContext value={theme}>
{children}
</ThemeContext>

// children
const theme = useContext(ThemeContext);
```

```jsx
// Wrapper
const app = createApp({})
app.provide("theme", theme)

// components
import { inject } from 'vue'
const theme = inject('theme')
```

有没有不需要 Wrapper 的方式呢？有

# 通过 localStorage + window.addEventListener("storage", fn) 实现；React 生态可以使用 jotai atomWithStorage
# 使用 window 全局变量，形如 window.theme = theme
# 修改 js framework 外部的 DOM，tailwindcss dark mode 就是采用类似模式。

```html
<html data-theme="dark">
  <body>
    <div class="bg-white dark:bg-black">
      <!-- ... -->
    </div>
  </body>
</html>
```




!! Elixir 社区
!! Native

